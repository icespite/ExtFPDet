const r=new Map;class o{static subscribe(e,c,{once:t=!1,condition:l=()=>!0}={}){const n=Symbol(e),s=r.get(e)||new Map;return s.set(n,{fn:c,once:t,condition:l}),r.set(e,s),{name:e,handler:n}}static cancel({name:e,handler:c}){const t=r.get(e);return t&&t.size?t.delete(c):!1}static publish(e,c){const t=r.get(e),l=({fn:s,once:a,handler:i})=>[s(c),a?o.cancel({name:e,handler:i}):null],n=({fn:s,once:a,condition:i},u)=>i()?l({fn:s,once:a,handler:u}):o.cancel({name:e,handler:u});return t&&t.size?t.forEach(n):!1}}export{o as P};
